import re
precedence = {'+': 1, '-': 1, '*': 2, '/': 2, '^': 3}
string = input()
outpt = []
stack = []
digits = [int(i) for i in re.findall(r'[0-9]+', string)]
operations = re.sub(r'[0-9]+', ' ', string).split()
divide_string = []
for d in range(len(digits)):
    divide_string.append(digits[d])
    try:
        if '(' in operations[d] or ')':
            sp = operations[d].replace('*(', '* (').replace('/(', '/ (').replace(')*', ') *').replace(')/', ') /').replace('))', ') )').replace('((', '( (').replace('-(', '- (')\
                .replace('+(', '+ (').replace(')-', ') -').replace(')+', ') +').split()
            divide_string.extend(sp)
    except:
        pass

stack = []


for d in divide_string:
    if isinstance(d, int):
        outpt.append(d)
    elif d == '(':
        stack.append(d)
    elif d == ')':
        while stack and stack[-1] != '(':
            outpt.append(stack.pop())
        stack.pop()
    else:
        while (stack and stack[-1] != '(' and precedence[stack[-1]] >= precedence[d]):
                outpt.append(stack.pop())
        stack.append(d)
outpt.extend(reversed(stack))


for i in range(len(outpt)):
    for j in range(len(outpt)):
        if outpt[j] == '+':
            outpt[j] = outpt[j - 1] + outpt[j - 2]
            del outpt[j - 1]
            del outpt[j - 2]
            break
        elif outpt[j] == '-':
            outpt[j] = outpt[j - 1] - outpt[j - 2]
            del outpt[j - 1]
            del outpt[j - 2]
            break
        elif outpt[j] == '*':
            outpt[j] = outpt[j - 1] * outpt[j - 2]
            del outpt[j - 1]
            del outpt[j - 2]
            break
        elif outpt[j] == '/':
            outpt[j] = outpt[j - 1] / outpt[j - 2]
            del outpt[j - 1]
            del outpt[j - 2]
            break
print(outpt[0])
